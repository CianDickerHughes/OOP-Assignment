package ie.atu.sw;
import java.util.Scanner;

public class Runner {

	public static void main(String[] args) throws Exception {
	    Scanner input = new Scanner(System.in);  // Create a Scanner object
	    int op;
		char choiceFile;

	    
	    WordEmbedding wordEmbedding = new WordEmbedding();
		wordEmbedding.load();
		
		Google1000 google1000 = new Google1000();
		google1000.load(wordEmbedding);
		
		System.out.println(wordEmbedding.getSizeEmbedding() +" : "+ google1000.getSize());
		

	    // Loop to display menu and handle options until quit
        while (true) {
			//You should put the following code into a menu or Menu class
			System.out.print(ConsoleColour.YELLOW_BOLD);
			System.out.println("************************************************************");
			System.out.println("*     ATU - Dept. of Computer Science & Applied Physics    *");
			System.out.println("*                                                          *");
			System.out.println("*             Virtual Threaded Text Simplifier             *");
			System.out.println("*                                                          *");
			System.out.println("************************************************************");
			System.out.print(ConsoleColour.BLUE_BOLD_BRIGHT);
			System.out.println("(1) Specify Embeddings File");
			System.out.println("(2) Specify Google 1000 File");
			System.out.println("(3) Specify an Output File (default: ./out.txt)");
			System.out.println("(4) Execute, Analyse and Report");
			System.out.println("(5) Test");
			System.out.println("(9) Optional Extras...");
			System.out.println("(-1) Quit");
			
			//Output a menu of options and solicit text from the user
			System.out.print(ConsoleColour.BLACK_BOLD_BRIGHT);
			System.out.print("Select Option [1-5]> ");
			
            // Validate input
			while (true) {
                if (input.hasNextInt()) {  // Check if the input is an integer
                    op = input.nextInt();
                    if (op >= 1 && op <= 5 || op == -1) { 
                        break;  
                    } else {
                        System.out.println("Invalid option. Please select between [0-5].");
                    }
                } else {
                    System.out.println("Invalid input. Please enter an integer.");
                    input.next();  
                }
            }
			
			//You may want to include a progress meter in you assignment!
			System.out.print(ConsoleColour.YELLOW);	//Change the colour of the console text
			int size = 100;							//The size of the meter. 100 equates to 100%
			for (int i =0 ; i < size ; i++) {		//The loop equates to a sequence of processing steps
				printProgress(i + 1, size); 		//After each (some) steps, update the progress meter
				Thread.sleep(10);					//Slows things down so the animation is visible 
			}
			
			System.out.println(ConsoleColour.BLACK_BOLD_BRIGHT);
			
			String filePath = "";
            
            // Handle menu options
            switch (op) {
                case 1:
                	System.out.println("\nEnter New Embedding File (leave empty to keep default):");
            	    input.nextLine();
            	    filePath = input.nextLine().trim();
            	    if (!filePath.isEmpty()) {
            	        wordEmbedding.setDictionaryFile(filePath);
            	    }
            	    try {
            	        wordEmbedding.load();
            	        System.out.println("Embedding loaded successfully.\n");
            	    } catch (Exception e) {
            	        System.out.println("Error loading embedding: " + e.getMessage());
            	    }
            	    break;
                case 2:
                	System.out.println("\nEnter New Embedding File (leave empty to keep default):");
            	    input.nextLine();
            	    filePath = input.nextLine().trim();
            	    if (!filePath.isEmpty()) {
            	    	google1000.setDictionaryFile(filePath);
            	    }
            	    try {
            	    	google1000.load(wordEmbedding);
            	        System.out.println("Embedding loaded successfully.\n");
            	    } catch (Exception e) {
            	        System.out.println("Error loading embedding: " + e.getMessage());
            	    }
            	    break;
                case 4:
                    System.out.println("Execute, Analyse and Report selected.");
                    // Logic for executing and reporting here
                    break;
                case 5:
                	System.out.println("You are using " + wordEmbedding.whichDictionaryFile());
                	System.out.println("Size of embeddings map: " + wordEmbedding.getSizeEmbedding());
                	System.out.println("Do you want to display the file? (y or n)");

                	char choiceFile = input.next().charAt(0);
                	input.nextLine();

                	if (choiceFile == 'y' || choiceFile == 'Y') {
                	    Map<String, double[]> embeddings = wordEmbedding.getEmbeddings(); // Get the map
                	    for (Map.Entry<String, double[]> entry : embeddings.entrySet()) {
                	        String word = entry.getKey();
                	        double[] embedding = entry.getValue();

                	        // Print the word and its embeddings
                	        System.out.print(word + ": [");
                	        for (int i = 0; i < embedding.length; i++) {
                	            System.out.print(embedding[i]);
                	            if (i < embedding.length - 1) {
                	                System.out.print(", "); // Add a comma only between elements
                	            }
                	        }
                	        System.out.println("]");
                	    }
                	    System.out.println("Size of embeddings map: " + embeddings.size()); // Print size again for clarity
                	}

                case 9:
                    System.out.println("Optional Extras selected.");
                    // Logic for optional extras here
                    break;
                case -1:
                    System.out.println("Quitting program.");
                    input.close();  // Close the scanner
                    return;  // Exit the main method
                default:
                    System.out.println("Invalid selection.");
            }
			
        }
	}
	

	
	/*
	 *  Terminal Progress Meter
	 *  -----------------------
	 *  You might find the progress meter below useful. The progress effect 
	 *  works best if you call this method from inside a loop and do not call
	 *  System.out.println(....) until the progress meter is finished.
	 *  
	 *  Please note the following carefully:
	 *  
	 *  1) The progress meter will NOT work in the Eclipse console, but will
	 *     work on Windows (DOS), Mac and Linux terminals.
	 *     
	 *  2) The meter works by using the line feed character "\r" to return to
	 *     the start of the current line and writes out the updated progress
	 *     over the existing information. If you output any text between 
	 *     calling this method, i.e. System.out.println(....), then the next
	 *     call to the progress meter will output the status to the next line.
	 *      
	 *  3) If the variable size is greater than the terminal width, a new line
	 *     escape character "\n" will be automatically added and the meter won't
	 *     work properly.  
	 *  
	 * 
	 */
	public static void printProgress(int index, int total) {
		if (index > total) return;	//Out of range
        int size = 50; 				//Must be less than console width
	    char done = '█';			//Change to whatever you like.
	    char todo = '░';			//Change to whatever you like.
	    
	    //Compute basic metrics for the meter
        int complete = (100 * index) / total;
        int completeLen = size * complete / 100;
        
        /*
         * A StringBuilder should be used for string concatenation inside a 
         * loop. However, as the number of loop iterations is small, using
         * the "+" operator may be more efficient as the instructions can
         * be optimized by the compiler. Either way, the performance overhead
         * will be marginal.  
         */
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (int i = 0; i < size; i++) {
        	sb.append((i < completeLen) ? done : todo);
        }
        
        /*
         * The line feed escape character "\r" returns the cursor to the 
         * start of the current line. Calling print(...) overwrites the
         * existing line and creates the illusion of an animation.
         */
        System.out.print("\r" + sb + "] " + complete + "%");
        
        //Once the meter reaches its max, move to a new line.
        if (done == total) System.out.println("\n");
    }
}