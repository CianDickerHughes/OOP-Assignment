// Cian Dicker-Hughes
// G00415413@atu.ie

package ie.atu.sw;
import java.util.Scanner;

public class Runner {

	
	public static void main(String[] args) throws Exception {
	    Scanner input = new Scanner(System.in);  // Create a Scanner object
		String filePath = "";
	    int op;
	    
	    WordEmbedding wordEmbedding = new WordEmbedding();
		wordEmbedding.load();
		
		Google1000 google1000 = new Google1000();
		google1000.load(wordEmbedding);
		
		SimplifyingText simplifying = new SimplifyingText();
		simplifying.load();
		
		ProcessFile output = new ProcessFile();

		
		System.out.println(wordEmbedding.getSize() +" : "+ google1000.getSize() +" : "+ simplifying.getSize());

	    // Loop to display menu and handle options until quit
        while (true) {
			//main menu
    		op = MainMeunPage.meun();

			
			//You may want to include a progress meter in you assignment!
			System.out.print(ConsoleColour.YELLOW);	//Change the colour of the console text
			int size = 100;							//The size of the meter. 100 equates to 100%
			for (int i =0 ; i < size ; i++) {		//The loop equates to a sequence of processing steps
				MainMeunPage.printProgress(i + 1, size); 		//After each (some) steps, update the progress meter
				Thread.sleep(10);					//Slows things down so the animation is visible 
			}
			
			System.out.println(ConsoleColour.BLACK_BOLD_BRIGHT);
			
            
            // Handle menu options
            switch (op) {
                case 1:
                	System.out.println("\nEnter New Embedding File (leave empty to keep default):");
            	    input.nextLine();
            	    filePath = input.nextLine().trim();
            	    if (!filePath.isEmpty()) {
            	        wordEmbedding.setDictionaryFile(filePath);
            	    }
            	    try {
            	        wordEmbedding.load();
            	        System.out.println("Embedding loaded successfully.\n");
            	    } catch (Exception e) {
            	        System.out.println("Error loading embedding: " + e.getMessage());
            	    }
            	    break;
                case 2:
                	System.out.println("\nEnter Google File (leave empty to keep default):");
            	    input.nextLine();
            	    filePath = input.nextLine().trim();
            	    if (!filePath.isEmpty()) {
            	    	google1000.setDictionaryFile(filePath);
            	    }
            	    try {
            	    	google1000.load(wordEmbedding);
            	        System.out.println("Google loaded successfully.\n");
            	    } catch (Exception e) {
            	        System.out.println("Error loading Google: " + e.getMessage());
            	    }
            	    break;
                case 3:
                	System.out.println("\nEnter output File (leave empty to keep default):");
            	    input.nextLine();
            	    filePath = input.nextLine().trim();
            	    if (!filePath.isEmpty()) {
            	    	output.setDictionaryFile(filePath);
            	    }
            	    try {
            	        System.out.println("output loaded successfully.\n");
            	    } catch (Exception e) {
            	        System.out.println("Error loading output: " + e.getMessage());
            	    }
                	break;
                case 4:
                    System.out.println("Execute, Analyse and Report selected.");
                    
                    break;
                case 5:
                	DisplayEmbeddings.display(wordEmbedding.whichDictionaryFile(), wordEmbedding.getEmbeddings(), input);
                	break;
                case 6:
                	DisplayEmbeddings.display(google1000.whichDictionaryFile(), google1000.getEmbeddings(), input);
                	break;
                case 7:
                	simplifying.displayWords();
                	break;
                case 8:
                	simplifying.displayText();
                	break;
                case 9:
                    System.out.println("Optional Extras selected.");
                    // Logic for optional extras here
                    break;
                case -1:
                    System.out.println("Quitting program.");
                    input.close();  // Close the scanner
                    return;  // Exit the main method
                default:
                    System.out.println("Invalid selection.");
            }
			
        }
	}
}